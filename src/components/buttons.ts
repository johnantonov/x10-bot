import TelegramBot from "node-telegram-bot-api";
import { user_type } from "../dto/user";

interface btnData {
  text: string;
  callback_data: string;
}

export class Options {
  reply_markup: { inline_keyboard: btnData[][] };

  constructor(buttons: btnData[][]) {
    this.reply_markup = {
      inline_keyboard: this.generateInlineKeyboard(buttons),
    };
  }

  generateInlineKeyboard(buttons: btnData[][]): btnData[][] {
    return buttons.map((row: btnData[]) =>
      row.map((button: btnData) => ({
        text: button.text,
        callback_data: button.callback_data,
      }))
    );
  }
}

export async function setBotCommands(bot: TelegramBot) {
  try {
    await bot.setMyCommands([
      { command: '/menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }
    ]);
    console.log('–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:', error);
  }
}

export const cbs = {
  wbkey: 'wb_api_key',
  followArticle: 'track',
  yesFollow: 'yes_track',
  changeTime: 'change_time',
  returnMain: 'return_main',
  deleteArticle: 'delete',
  setNewUserType: 'set_new_user_type',
  setOldUserType: 'set_old_user_type',
  onTable: 'turn_on_ss',
  offTable: 'turn_off_ss',
  yes: '_yes',
  no: '_no',
  menu: 'menu',
  menuAndClean: 'menu_clean',
  settingsArt: 'art_settings',
  cancelArt: 'art_setting_cancel',
  titleArt: 'art_setting_title',
  costArt: 'art_setting_cost',
  goPrem: 'go_prem',
  getReportNow: 'get_report_now',
  loading: 'loading',
  editReportProducts: 'edit_report_products',
}

export const buttons = {
  setWbApiKey: { text: '‚ûï –ü—Ä–∏–≤—è–∑–∞—Ç—å WB API –∫–ª—é—á', callback_data: cbs.wbkey },
  followArticle: { text: 'üëÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª', callback_data: cbs.followArticle },
  yesReadyToFollow: { text: '‚úÖ –î–∞. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª', callback_data: cbs.yesFollow },
  changeTimeToReport: { text: 'üïò –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤', callback_data: cbs.changeTime },
  returnMain: { text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: cbs.returnMain },
  onTable: { text: 'üìÇ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç—á–µ—Ç', callback_data: cbs.onTable },
  offTable: { text: '‚ùå  –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç—á–µ—Ç', callback_data: cbs.offTable },
  menu: { text: '‚Ü©Ô∏è –ú–µ–Ω—é', callback_data: cbs.menu },
  menuAndClean: { text: '‚Ü©Ô∏è –ú–µ–Ω—é', callback_data: cbs.menuAndClean },
  settingsArticleReport: { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—á–µ—Ç', callback_data: cbs.settingsArt },
  cancelArt: { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ', callback_data: cbs.cancelArt },
  titleArt: { text: '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', callback_data: cbs.titleArt },
  costArt: { text: 'üí∞ –í–≤–µ—Å—Ç–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä', callback_data: cbs.costArt },
  getReportNow: { text: 'üìÇ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å', callback_data: cbs.getReportNow },
  editReportProducts: { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç—á–µ—Ç–µ', callback_data: cbs.editReportProducts },
  loading: { text: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...', callback_data: cbs.loading },
  setOldUserType: { text: 'üëë –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: cbs.setOldUserType },
}

export const wbOptions = new Options([
  [{ text: '‚ûï –ü—Ä–∏–≤—è–∑–∞—Ç—å WB API –∫–ª—é—á', callback_data: cbs.wbkey }],
  [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª', callback_data: cbs.deleteArticle }],
]);

export const returnMenu = (clean: boolean = false) => {
  return new Options([
    [clean ? buttons.menuAndClean : buttons.menu]
  ])
}

export const mainOptions = (type?: user_type, waitReport?: boolean) => {
  if (type?.startsWith('old')) {
    if (type.endsWith('_ss')) {
      const btns = [
        [buttons.getReportNow],
        [buttons.editReportProducts],
        [buttons.changeTimeToReport],
        [buttons.offTable],
      ]
      if (waitReport) {
        btns[0] = [buttons.loading]
      }
      return new Options(btns);
    }
    return new Options([
        [buttons.onTable],
        [buttons.editReportProducts],
        [buttons.changeTimeToReport],
        [buttons.offTable],
      ]);
    }
  
  return startOptions
} 

export const settingsArtOptions = () => {
  return new Options([
    [buttons.titleArt],
    [buttons.costArt],
    [buttons.cancelArt],
  ])
}

export const yesNo = (cbPart: string) => {
  return new Options([
    [{ text: '‚úÖ –î–∞', callback_data: cbPart + cbs.yes }],
    [{ text: '‚ùå –ù–µ—Ç', callback_data: cbPart + cbs.no }],
  ])
}

const startOptions = new Options([
  [buttons.setOldUserType],
])

export function generateReportTimeButtons(rep: string, page: number = 0): TelegramBot.InlineKeyboardButton[][] {
  const startTime = 5;
  const endTime = 24;
  const timesPerPage = 20;
  const times: TelegramBot.InlineKeyboardButton[][] = [];

  for (let i = page * timesPerPage + startTime; i < Math.min((page + 1) * timesPerPage + startTime, endTime); i++) {
    const row = Math.floor((i - page * timesPerPage - startTime) / 4); 
    if (!times[row]) {
      times[row] = [];
    }
    times[row].push({ text: `${i}:00`, callback_data: `${rep}${i}` });
  }

  /*
  const navigationButtons: TelegramBot.InlineKeyboardButton[] = [];
  if (page > 0) {
    navigationButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `${rep}_time_prev_page_${page - 1}` });
  }
  if ((page + 1) * timesPerPage + startTime < endTime) {
    navigationButtons.push({ text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data: `${rep}_time_next_page_${page + 1}` });
  }

  if (navigationButtons.length > 0) {
    times.push(navigationButtons);
  }
  */

  return times;
}

